{
  "address": "0xe92F67D03637578E94345d51C3365477354aa604",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "candidate_id",
          "type": "uint256"
        }
      ],
      "name": "CandidateNotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotAValidPollId",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotMeetingTimeConstraints",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PollAlreadyExists",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "poll_id",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "candidate_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "email",
          "type": "string"
        }
      ],
      "name": "addCandidate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "poll_id",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "email",
          "type": "string"
        }
      ],
      "name": "addEligibleVoters",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "poll_id",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "candidate_id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "voter_email",
          "type": "string"
        }
      ],
      "name": "addVote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "candidates",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "email",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "candidateID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "votes",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "poll_id",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "org_name",
          "type": "string"
        },
        {
          "internalType": "int256",
          "name": "start_time",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "duration",
          "type": "int256"
        }
      ],
      "name": "createPoll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "eligibleVoters",
      "outputs": [
        {
          "internalType": "string",
          "name": "email",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "hasVoted",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "poll_id",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getCandidateID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "candidate_id",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "poll_id",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "candidate_id",
          "type": "uint256"
        }
      ],
      "name": "getVotes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "polls",
      "outputs": [
        {
          "internalType": "string",
          "name": "id",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "organizationName",
          "type": "string"
        },
        {
          "internalType": "int256",
          "name": "startTime",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "duration",
          "type": "int256"
        },
        {
          "internalType": "bool",
          "name": "isCreated",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x5a53a83091ba8c6fef9b7b44d2f1e77ca29ad59f1cae2dcf474c0429af107eec",
  "receipt": {
    "to": null,
    "from": "0x7E0b7708Eb30FDc43BDD9D36EF3CDcfA0b29834e",
    "contractAddress": "0xe92F67D03637578E94345d51C3365477354aa604",
    "transactionIndex": 193,
    "gasUsed": "1656167",
    "logsBloom": "0x
    "blockHash": "0xb343c6460b8f7051d486fa99423db8483490b2b5a54513d9147524212330a813",
    "transactionHash": "0x5a53a83091ba8c6fef9b7b44d2f1e77ca29ad59f1cae2dcf474c0429af107eec",
    "logs": [],
    "blockNumber": 8703618,
    "cumulativeGasUsed": "14874366",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "72002a137dbbb4a78938a245a4fca8e6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"candidate_id\",\"type\":\"uint256\"}],\"name\":\"CandidateNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAValidPollId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotMeetingTimeConstraints\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PollAlreadyExists\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"poll_id\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"candidate_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"email\",\"type\":\"string\"}],\"name\":\"addCandidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"poll_id\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"email\",\"type\":\"string\"}],\"name\":\"addEligibleVoters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"poll_id\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"candidate_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"voter_email\",\"type\":\"string\"}],\"name\":\"addVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"candidates\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"email\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"candidateID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votes\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"poll_id\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"org_name\",\"type\":\"string\"},{\"internalType\":\"int256\",\"name\":\"start_time\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"duration\",\"type\":\"int256\"}],\"name\":\"createPoll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"eligibleVoters\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"email\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"hasVoted\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"poll_id\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getCandidateID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"candidate_id\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"poll_id\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"candidate_id\",\"type\":\"uint256\"}],\"name\":\"getVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"polls\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"organizationName\",\"type\":\"string\"},{\"internalType\":\"int256\",\"name\":\"startTime\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"duration\",\"type\":\"int256\"},{\"internalType\":\"bool\",\"name\":\"isCreated\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"createPoll(string,string,int256,int256)\":{\"notice\":\"1. Creation of a poll by an organization. 2. Ability to add eligible participants. 3. Adding candidates in the poll. 4. Allowing voters to vote, if they have not done so, and withing the time constraints. 5. After the end time, remove the poll from the list. 6. Allow view live vote count. 7. View the candidates' id.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Voting.sol\":\"Voting\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Voting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.17;\\n\\nerror CandidateNotFound (\\n    uint256 candidate_id\\n);\\nerror NotMeetingTimeConstraints();\\nerror NotAValidPollId();\\nerror PollAlreadyExists();\\n\\ncontract Voting {\\n    struct Voter {\\n        string email;\\n        string name;\\n        bool hasVoted;\\n    }\\n    struct Candidate {\\n        string name;\\n        string email;\\n        uint256 candidateID;\\n        uint256 votes;\\n    }\\n    struct Poll {\\n        string id;\\n        string organizationName;\\n        int256 startTime;\\n        int256 duration;\\n        bool isCreated;\\n    }\\n\\n    mapping(string => Poll) public polls;\\n    mapping(string => Candidate[]) public candidates;\\n    mapping(string => Voter[]) public eligibleVoters;\\n    /**\\n    1. Creation of a poll by an organization.\\n    2. Ability to add eligible participants.\\n    3. Adding candidates in the poll.\\n    4. Allowing voters to vote, if they have not done so, and withing the time constraints.\\n    5. After the end time, remove the poll from the list.\\n    6. Allow view live vote count.\\n    7. View the candidates' id.\\n    */\\n    \\n    function createPoll (\\n        string memory poll_id, \\n        string memory org_name,\\n        int256 start_time,\\n        int256 duration\\n    ) public {\\n\\n        if(polls[poll_id].isCreated) {\\n            revert PollAlreadyExists();\\n        }\\n\\n        Poll memory p;\\n        p.id = poll_id;\\n        p.organizationName = org_name;\\n        p.startTime = start_time;\\n        p.duration = duration;\\n        p.isCreated = true;\\n        polls[poll_id] = p;\\n    }\\n\\n\\n    function addEligibleVoters(\\n        string memory poll_id,\\n        string memory name,\\n        string memory email\\n    ) public {\\n\\n        if(!polls[poll_id].isCreated) {\\n            revert NotAValidPollId();\\n        }\\n\\n        Voter memory v;\\n        v.name = name;\\n        v.email = email;\\n        v.hasVoted = false;\\n\\n        eligibleVoters[poll_id].push(v);\\n    }\\n\\n\\n    function addCandidate(\\n        string memory poll_id,\\n        string memory name,\\n        uint256 candidate_id,\\n        string memory email\\n    ) public {\\n        \\n        if(!polls[poll_id].isCreated) {\\n            revert NotAValidPollId();\\n        }\\n\\n        if(int256(block.timestamp) - polls[poll_id].startTime > 0) {\\n            revert NotMeetingTimeConstraints();\\n        }\\n\\n        Candidate memory c;\\n        c.name = name;\\n        c.candidateID = candidate_id;\\n        c.email = email;\\n        c.votes = 0;\\n\\n        candidates[poll_id].push(c);\\n    }\\n\\n\\n    function addVote(\\n        string memory poll_id,\\n        uint256 candidate_id,\\n        string memory voter_email\\n    ) public {\\n        \\n        if(!polls[poll_id].isCreated) {\\n            revert NotAValidPollId();\\n        }\\n\\n        if(int256(block.timestamp) - polls[poll_id].startTime > polls[poll_id].duration){\\n            revert NotMeetingTimeConstraints();\\n        }\\n        else if(int256(block.timestamp) - polls[poll_id].startTime < 0){\\n            revert NotMeetingTimeConstraints();\\n        }\\n\\n        uint256 n = candidates[poll_id].length;\\n        bool candidateFound = false;\\n\\n        for(uint256 i = 0 ;i < n;i++) {\\n\\n            if(candidates[poll_id][i].candidateID == candidate_id) {\\n                candidateFound = true;\\n                uint256 m = eligibleVoters[poll_id].length;\\n                \\n\\n                for(uint256 j = 0;j < m;j++) {\\n                    Voter memory v = eligibleVoters[poll_id][i];\\n\\n                    /**\\n                    Comparing hash of the strings as string comparision is not available in solidity.\\n                    */\\n\\n                    if(keccak256(abi.encodePacked(voter_email)) == keccak256(abi.encodePacked(v.email))){\\n                        \\n                        /**\\n                        Allow the candidate to vote if he has not voted before.\\n                        */\\n\\n                        bool b = eligibleVoters[poll_id][j].hasVoted;\\n                        if(!b) {\\n                            candidates[poll_id][i].votes++;\\n                            eligibleVoters[poll_id][j].hasVoted = true;\\n                        }\\n                        break;\\n                    }\\n                }\\n                break;\\n            }\\n        }\\n        if(!candidateFound) {\\n            revert CandidateNotFound(\\n                candidate_id\\n            );\\n        }\\n    }\\n\\n\\n    function getVotes(\\n        string memory poll_id,\\n        uint256 candidate_id\\n    ) public view returns(uint256) {\\n        \\n        if(!polls[poll_id].isCreated) {\\n            revert NotAValidPollId();\\n        }\\n\\n        uint256 n = candidates[poll_id].length;\\n        uint256 votes = 0;\\n\\n        bool candidateFound = false;\\n        for(uint256 i = 0;i < n;i++) {\\n            if(candidates[poll_id][i].candidateID == candidate_id) {\\n                votes = candidates[poll_id][i].votes;\\n                candidateFound = true;\\n                break;\\n            }\\n        }\\n\\n        if(!candidateFound) {\\n            revert CandidateNotFound(\\n                candidate_id\\n            );\\n        }\\n        return votes;\\n    }\\n\\n    function getCandidateID(\\n        string memory poll_id,\\n        uint256 index\\n        \\n    ) public view returns(uint256 candidate_id) {\\n        \\n        return candidates[poll_id][index].candidateID;\\n    }\\n\\n    function deletePoll(\\n        string memory poll_id\\n    ) private {\\n\\n        if(!polls[poll_id].isCreated) {\\n            revert NotAValidPollId();\\n        }\\n        \\n        if(int256(block.timestamp) - polls[poll_id].startTime <= polls[poll_id].duration){\\n            revert NotMeetingTimeConstraints();\\n        }\\n\\n        delete polls[poll_id];\\n        delete candidates[poll_id];\\n        delete eligibleVoters[poll_id];\\n    }\\n}\\n\\n// create poll abc, aaravcorp, 1676355531, 1000\\n// candi abc, aarav1, 1, aarav1@gmail.com\\n// candi abc, aarav2, 2, aarav2@gmail.com\\n// voter abc, aaravO, aaravO@gmail.com\\n// voter abc, elon, elon@gmail.com\\n// vote abc, 1, aaravO@gmail.com\\n// vote abc, 2, elon@gmail.com\\n\\n// create poll def, jaincorp, 1676353331, 1000\\n// candi  def, aarav1, 1, aarav1@gmail.com\\n// candi def, aarav2, 2, aarav2@gmail.com\\n// voter def, aaravO, aaravO@gmail.com\\n// voter def, elon, elon@gmail.com\\n// vote def, 1, aaravO@gmail.com\\n// vote def, 2, elon@gmail.com\",\"keccak256\":\"0x1eeacd298509cd47ab4e9ba61a82171db45438f567852295e9422798505e0b40\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611d15806100206000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c80638058316a116100665780638058316a1461011e57806398343d1d14610152578063b85dac4314610182578063c286d923146101b2578063eb309f65146101ce57610093565b806304351b8a1461009857806332fbe4c3146100ca578063672da958146100e657806370789e5c14610102575b600080fd5b6100b260048036038101906100ad9190611392565b610201565b6040516100c193929190611488565b60405180910390f35b6100e460048036038101906100df91906114cd565b61037b565b005b61010060048036038101906100fb91906115aa565b6104a7565b005b61011c60048036038101906101179190611649565b6105d5565b005b610138600480360381019061013391906116d4565b610b42565b60405161014995949392919061172c565b60405180910390f35b61016c60048036038101906101679190611392565b610cab565b604051610179919061179c565b60405180910390f35b61019c60048036038101906101979190611392565b610e3c565b6040516101a9919061179c565b60405180910390f35b6101cc60048036038101906101c791906117b7565b610e88565b005b6101e860048036038101906101e39190611392565b611013565b6040516101f89493929190611872565b60405180910390f35b600282805160208101820180518482526020830160208501208183528095505050505050818154811061023357600080fd5b906000526020600020906003020160009150915050806000018054610257906118f4565b80601f0160208091040260200160405190810160405280929190818152602001828054610283906118f4565b80156102d05780601f106102a5576101008083540402835291602001916102d0565b820191906000526020600020905b8154815290600101906020018083116102b357829003601f168201915b5050505050908060010180546102e5906118f4565b80601f0160208091040260200160405190810160405280929190818152602001828054610311906118f4565b801561035e5780601f106103335761010080835404028352916020019161035e565b820191906000526020600020905b81548152906001019060200180831161034157829003601f168201915b5050505050908060020160009054906101000a900460ff16905083565b60008360405161038b9190611961565b908152602001604051809103902060040160009054906101000a900460ff166103e0576040517fd0783c0e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6103e8611186565b828160200181905250818160000181905250600081604001901515908115158152505060028460405161041b9190611961565b908152602001604051809103902081908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000190816104689190611b24565b50602082015181600101908161047e9190611b24565b5060408201518160020160006101000a81548160ff021916908315150217905550505050505050565b6000846040516104b79190611961565b908152602001604051809103902060040160009054906101000a900460ff161561050d576040517f1fcc24a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6105156111a9565b848160000181905250838160200181905250828160400181815250508181606001818152505060018160800190151590811515815250508060008660405161055d9190611961565b908152602001604051809103902060008201518160000190816105809190611b24565b5060208201518160010190816105969190611b24565b50604082015181600201556060820151816003015560808201518160040160006101000a81548160ff0219169083151502179055509050505050505050565b6000836040516105e59190611961565b908152602001604051809103902060040160009054906101000a900460ff1661063a576040517fd0783c0e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008360405161064a9190611961565b90815260200160405180910390206003015460008460405161066c9190611961565b908152602001604051809103902060020154426106899190611c25565b13156106c1576040517fd754507f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080846040516106d29190611961565b908152602001604051809103902060020154426106ef9190611c25565b1215610727576040517fd754507f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006001846040516107399190611961565b90815260200160405180910390208054905090506000805b82811015610af8578460018760405161076a9190611961565b9081526020016040518091039020828154811061078a57610789611c68565b5b90600052602060002090600402016002015403610ae5576001915060006002876040516107b79190611961565b908152602001604051809103902080549050905060005b81811015610ade5760006002896040516107e89190611961565b9081526020016040518091039020848154811061080857610807611c68565b5b9060005260206000209060030201604051806060016040529081600082018054610831906118f4565b80601f016020809104026020016040519081016040528092919081815260200182805461085d906118f4565b80156108aa5780601f1061087f576101008083540402835291602001916108aa565b820191906000526020600020905b81548152906001019060200180831161088d57829003601f168201915b505050505081526020016001820180546108c3906118f4565b80601f01602080910402602001604051908101604052809291908181526020018280546108ef906118f4565b801561093c5780601f106109115761010080835404028352916020019161093c565b820191906000526020600020905b81548152906001019060200180831161091f57829003601f168201915b505050505081526020016002820160009054906101000a900460ff161515151581525050905080600001516040516020016109779190611961565b604051602081830303815290604052805190602001208760405160200161099e9190611961565b6040516020818303038152906040528051906020012003610aca57600060028a6040516109cb9190611961565b908152602001604051809103902083815481106109eb576109ea611c68565b5b906000526020600020906003020160020160009054906101000a900460ff16905080610ac35760018a604051610a219190611961565b90815260200160405180910390208581548110610a4157610a40611c68565b5b90600052602060002090600402016003016000815480929190610a6390611c97565b9190505550600160028b604051610a7a9190611961565b90815260200160405180910390208481548110610a9a57610a99611c68565b5b906000526020600020906003020160020160006101000a81548160ff0219169083151502179055505b5050610ade565b508080610ad690611c97565b9150506107ce565b5050610af8565b8080610af090611c97565b915050610751565b5080610b3b57836040517f66ad9932000000000000000000000000000000000000000000000000000000008152600401610b32919061179c565b60405180910390fd5b5050505050565b600081805160208101820180518482526020830160208501208183528095505050505050600091509050806000018054610b7b906118f4565b80601f0160208091040260200160405190810160405280929190818152602001828054610ba7906118f4565b8015610bf45780601f10610bc957610100808354040283529160200191610bf4565b820191906000526020600020905b815481529060010190602001808311610bd757829003601f168201915b505050505090806001018054610c09906118f4565b80601f0160208091040260200160405190810160405280929190818152602001828054610c35906118f4565b8015610c825780601f10610c5757610100808354040283529160200191610c82565b820191906000526020600020905b815481529060010190602001808311610c6557829003601f168201915b5050505050908060020154908060030154908060040160009054906101000a900460ff16905085565b60008083604051610cbc9190611961565b908152602001604051809103902060040160009054906101000a900460ff16610d11576040517fd0783c0e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600184604051610d239190611961565b908152602001604051809103902080549050905060008060005b83811015610ded5785600188604051610d569190611961565b90815260200160405180910390208281548110610d7657610d75611c68565b5b90600052602060002090600402016002015403610dda57600187604051610d9d9190611961565b90815260200160405180910390208181548110610dbd57610dbc611c68565b5b906000526020600020906004020160030154925060019150610ded565b8080610de590611c97565b915050610d3d565b5080610e3057846040517f66ad9932000000000000000000000000000000000000000000000000000000008152600401610e27919061179c565b60405180910390fd5b81935050505092915050565b6000600183604051610e4e9190611961565b90815260200160405180910390208281548110610e6e57610e6d611c68565b5b906000526020600020906004020160020154905092915050565b600084604051610e989190611961565b908152602001604051809103902060040160009054906101000a900460ff16610eed576040517fd0783c0e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008085604051610efe9190611961565b90815260200160405180910390206002015442610f1b9190611c25565b1315610f53576040517fd754507f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610f5b6111da565b838160000181905250828160400181815250508181602001819052506000816060018181525050600185604051610f929190611961565b90815260200160405180910390208190806001815401808255809150506001900390600052602060002090600402016000909190919091506000820151816000019081610fdf9190611b24565b506020820151816001019081610ff59190611b24565b50604082015181600201556060820151816003015550505050505050565b600182805160208101820180518482526020830160208501208183528095505050505050818154811061104557600080fd5b906000526020600020906004020160009150915050806000018054611069906118f4565b80601f0160208091040260200160405190810160405280929190818152602001828054611095906118f4565b80156110e25780601f106110b7576101008083540402835291602001916110e2565b820191906000526020600020905b8154815290600101906020018083116110c557829003601f168201915b5050505050908060010180546110f7906118f4565b80601f0160208091040260200160405190810160405280929190818152602001828054611123906118f4565b80156111705780601f1061114557610100808354040283529160200191611170565b820191906000526020600020905b81548152906001019060200180831161115357829003601f168201915b5050505050908060020154908060030154905084565b604051806060016040528060608152602001606081526020016000151581525090565b6040518060a00160405280606081526020016060815260200160008152602001600081526020016000151581525090565b6040518060800160405280606081526020016060815260200160008152602001600081525090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61126982611220565b810181811067ffffffffffffffff8211171561128857611287611231565b5b80604052505050565b600061129b611202565b90506112a78282611260565b919050565b600067ffffffffffffffff8211156112c7576112c6611231565b5b6112d082611220565b9050602081019050919050565b82818337600083830152505050565b60006112ff6112fa846112ac565b611291565b90508281526020810184848401111561131b5761131a61121b565b5b6113268482856112dd565b509392505050565b600082601f83011261134357611342611216565b5b81356113538482602086016112ec565b91505092915050565b6000819050919050565b61136f8161135c565b811461137a57600080fd5b50565b60008135905061138c81611366565b92915050565b600080604083850312156113a9576113a861120c565b5b600083013567ffffffffffffffff8111156113c7576113c6611211565b5b6113d38582860161132e565b92505060206113e48582860161137d565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561142857808201518184015260208101905061140d565b60008484015250505050565b600061143f826113ee565b61144981856113f9565b935061145981856020860161140a565b61146281611220565b840191505092915050565b60008115159050919050565b6114828161146d565b82525050565b600060608201905081810360008301526114a28186611434565b905081810360208301526114b68185611434565b90506114c56040830184611479565b949350505050565b6000806000606084860312156114e6576114e561120c565b5b600084013567ffffffffffffffff81111561150457611503611211565b5b6115108682870161132e565b935050602084013567ffffffffffffffff81111561153157611530611211565b5b61153d8682870161132e565b925050604084013567ffffffffffffffff81111561155e5761155d611211565b5b61156a8682870161132e565b9150509250925092565b6000819050919050565b61158781611574565b811461159257600080fd5b50565b6000813590506115a48161157e565b92915050565b600080600080608085870312156115c4576115c361120c565b5b600085013567ffffffffffffffff8111156115e2576115e1611211565b5b6115ee8782880161132e565b945050602085013567ffffffffffffffff81111561160f5761160e611211565b5b61161b8782880161132e565b935050604061162c87828801611595565b925050606061163d87828801611595565b91505092959194509250565b6000806000606084860312156116625761166161120c565b5b600084013567ffffffffffffffff8111156116805761167f611211565b5b61168c8682870161132e565b935050602061169d8682870161137d565b925050604084013567ffffffffffffffff8111156116be576116bd611211565b5b6116ca8682870161132e565b9150509250925092565b6000602082840312156116ea576116e961120c565b5b600082013567ffffffffffffffff81111561170857611707611211565b5b6117148482850161132e565b91505092915050565b61172681611574565b82525050565b600060a08201905081810360008301526117468188611434565b9050818103602083015261175a8187611434565b9050611769604083018661171d565b611776606083018561171d565b6117836080830184611479565b9695505050505050565b6117968161135c565b82525050565b60006020820190506117b1600083018461178d565b92915050565b600080600080608085870312156117d1576117d061120c565b5b600085013567ffffffffffffffff8111156117ef576117ee611211565b5b6117fb8782880161132e565b945050602085013567ffffffffffffffff81111561181c5761181b611211565b5b6118288782880161132e565b93505060406118398782880161137d565b925050606085013567ffffffffffffffff81111561185a57611859611211565b5b6118668782880161132e565b91505092959194509250565b6000608082019050818103600083015261188c8187611434565b905081810360208301526118a08186611434565b90506118af604083018561178d565b6118bc606083018461178d565b95945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061190c57607f821691505b60208210810361191f5761191e6118c5565b5b50919050565b600081905092915050565b600061193b826113ee565b6119458185611925565b935061195581856020860161140a565b80840191505092915050565b600061196d8284611930565b915081905092915050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026119da7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261199d565b6119e4868361199d565b95508019841693508086168417925050509392505050565b6000819050919050565b6000611a21611a1c611a178461135c565b6119fc565b61135c565b9050919050565b6000819050919050565b611a3b83611a06565b611a4f611a4782611a28565b8484546119aa565b825550505050565b600090565b611a64611a57565b611a6f818484611a32565b505050565b5b81811015611a9357611a88600082611a5c565b600181019050611a75565b5050565b601f821115611ad857611aa981611978565b611ab28461198d565b81016020851015611ac1578190505b611ad5611acd8561198d565b830182611a74565b50505b505050565b600082821c905092915050565b6000611afb60001984600802611add565b1980831691505092915050565b6000611b148383611aea565b9150826002028217905092915050565b611b2d826113ee565b67ffffffffffffffff811115611b4657611b45611231565b5b611b5082546118f4565b611b5b828285611a97565b600060209050601f831160018114611b8e5760008415611b7c578287015190505b611b868582611b08565b865550611bee565b601f198416611b9c86611978565b60005b82811015611bc457848901518255600182019150602085019450602081019050611b9f565b86831015611be15784890151611bdd601f891682611aea565b8355505b6001600288020188555050505b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611c3082611574565b9150611c3b83611574565b9250828203905081811260008412168282136000851215161715611c6257611c61611bf6565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000611ca28261135c565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611cd457611cd3611bf6565b5b60018201905091905056fea26469706673582212209f9cc7da5f3f6be64923a19cc078fe8b360c6bfa55f08a7af6eda53ec8136c1964736f6c63430008110033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "createPoll(string,string,int256,int256)": {
        "notice": "1. Creation of a poll by an organization. 2. Ability to add eligible participants. 3. Adding candidates in the poll. 4. Allowing voters to vote, if they have not done so, and withing the time constraints. 5. After the end time, remove the poll from the list. 6. Allow view live vote count. 7. View the candidates' id."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 43,
        "contract": "contracts/Voting.sol:Voting",
        "label": "polls",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_string_memory_ptr,t_struct(Poll)38_storage)"
      },
      {
        "astId": 49,
        "contract": "contracts/Voting.sol:Voting",
        "label": "candidates",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_string_memory_ptr,t_array(t_struct(Candidate)27_storage)dyn_storage)"
      },
      {
        "astId": 55,
        "contract": "contracts/Voting.sol:Voting",
        "label": "eligibleVoters",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_string_memory_ptr,t_array(t_struct(Voter)18_storage)dyn_storage)"
      }
    ],
    "types": {
      "t_array(t_struct(Candidate)27_storage)dyn_storage": {
        "base": "t_struct(Candidate)27_storage",
        "encoding": "dynamic_array",
        "label": "struct Voting.Candidate[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Voter)18_storage)dyn_storage": {
        "base": "t_struct(Voter)18_storage",
        "encoding": "dynamic_array",
        "label": "struct Voting.Voter[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_string_memory_ptr,t_array(t_struct(Candidate)27_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => struct Voting.Candidate[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Candidate)27_storage)dyn_storage"
      },
      "t_mapping(t_string_memory_ptr,t_array(t_struct(Voter)18_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => struct Voting.Voter[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Voter)18_storage)dyn_storage"
      },
      "t_mapping(t_string_memory_ptr,t_struct(Poll)38_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => struct Voting.Poll)",
        "numberOfBytes": "32",
        "value": "t_struct(Poll)38_storage"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Candidate)27_storage": {
        "encoding": "inplace",
        "label": "struct Voting.Candidate",
        "members": [
          {
            "astId": 20,
            "contract": "contracts/Voting.sol:Voting",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 22,
            "contract": "contracts/Voting.sol:Voting",
            "label": "email",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 24,
            "contract": "contracts/Voting.sol:Voting",
            "label": "candidateID",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 26,
            "contract": "contracts/Voting.sol:Voting",
            "label": "votes",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Poll)38_storage": {
        "encoding": "inplace",
        "label": "struct Voting.Poll",
        "members": [
          {
            "astId": 29,
            "contract": "contracts/Voting.sol:Voting",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 31,
            "contract": "contracts/Voting.sol:Voting",
            "label": "organizationName",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 33,
            "contract": "contracts/Voting.sol:Voting",
            "label": "startTime",
            "offset": 0,
            "slot": "2",
            "type": "t_int256"
          },
          {
            "astId": 35,
            "contract": "contracts/Voting.sol:Voting",
            "label": "duration",
            "offset": 0,
            "slot": "3",
            "type": "t_int256"
          },
          {
            "astId": 37,
            "contract": "contracts/Voting.sol:Voting",
            "label": "isCreated",
            "offset": 0,
            "slot": "4",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(Voter)18_storage": {
        "encoding": "inplace",
        "label": "struct Voting.Voter",
        "members": [
          {
            "astId": 13,
            "contract": "contracts/Voting.sol:Voting",
            "label": "email",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 15,
            "contract": "contracts/Voting.sol:Voting",
            "label": "name",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 17,
            "contract": "contracts/Voting.sol:Voting",
            "label": "hasVoted",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}